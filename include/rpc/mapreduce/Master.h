/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Master_H
#define Master_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "mapreduce_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MasterIf {
 public:
  virtual ~MasterIf() {}
  virtual int32_t AssignId() = 0;
  virtual void AssignTask(TaskResponse& _return) = 0;
  virtual void CommitTask(const TaskResult& result) = 0;
};

class MasterIfFactory {
 public:
  typedef MasterIf Handler;

  virtual ~MasterIfFactory() {}

  virtual MasterIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MasterIf* /* handler */) = 0;
  };

class MasterIfSingletonFactory : virtual public MasterIfFactory {
 public:
  MasterIfSingletonFactory(const ::std::shared_ptr<MasterIf>& iface) : iface_(iface) {}
  virtual ~MasterIfSingletonFactory() {}

  virtual MasterIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(MasterIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<MasterIf> iface_;
};

class MasterNull : virtual public MasterIf {
 public:
  virtual ~MasterNull() {}
  int32_t AssignId() override {
    int32_t _return = 0;
    return _return;
  }
  void AssignTask(TaskResponse& /* _return */) override {
    return;
  }
  void CommitTask(const TaskResult& /* result */) override {
    return;
  }
};


class Master_AssignId_args {
 public:

  Master_AssignId_args(const Master_AssignId_args&) noexcept;
  Master_AssignId_args& operator=(const Master_AssignId_args&) noexcept;
  Master_AssignId_args() noexcept {
  }

  virtual ~Master_AssignId_args() noexcept;

  bool operator == (const Master_AssignId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Master_AssignId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Master_AssignId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Master_AssignId_pargs {
 public:


  virtual ~Master_AssignId_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Master_AssignId_result__isset {
  _Master_AssignId_result__isset() : success(false) {}
  bool success :1;
} _Master_AssignId_result__isset;

class Master_AssignId_result {
 public:

  Master_AssignId_result(const Master_AssignId_result&) noexcept;
  Master_AssignId_result& operator=(const Master_AssignId_result&) noexcept;
  Master_AssignId_result() noexcept
                         : success(0) {
  }

  virtual ~Master_AssignId_result() noexcept;
  int32_t success;

  _Master_AssignId_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Master_AssignId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Master_AssignId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Master_AssignId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Master_AssignId_presult__isset {
  _Master_AssignId_presult__isset() : success(false) {}
  bool success :1;
} _Master_AssignId_presult__isset;

class Master_AssignId_presult {
 public:


  virtual ~Master_AssignId_presult() noexcept;
  int32_t* success;

  _Master_AssignId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Master_AssignTask_args {
 public:

  Master_AssignTask_args(const Master_AssignTask_args&) noexcept;
  Master_AssignTask_args& operator=(const Master_AssignTask_args&) noexcept;
  Master_AssignTask_args() noexcept {
  }

  virtual ~Master_AssignTask_args() noexcept;

  bool operator == (const Master_AssignTask_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Master_AssignTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Master_AssignTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Master_AssignTask_pargs {
 public:


  virtual ~Master_AssignTask_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Master_AssignTask_result__isset {
  _Master_AssignTask_result__isset() : success(false) {}
  bool success :1;
} _Master_AssignTask_result__isset;

class Master_AssignTask_result {
 public:

  Master_AssignTask_result(const Master_AssignTask_result&);
  Master_AssignTask_result& operator=(const Master_AssignTask_result&);
  Master_AssignTask_result() noexcept {
  }

  virtual ~Master_AssignTask_result() noexcept;
  TaskResponse success;

  _Master_AssignTask_result__isset __isset;

  void __set_success(const TaskResponse& val);

  bool operator == (const Master_AssignTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Master_AssignTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Master_AssignTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Master_AssignTask_presult__isset {
  _Master_AssignTask_presult__isset() : success(false) {}
  bool success :1;
} _Master_AssignTask_presult__isset;

class Master_AssignTask_presult {
 public:


  virtual ~Master_AssignTask_presult() noexcept;
  TaskResponse* success;

  _Master_AssignTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Master_CommitTask_args__isset {
  _Master_CommitTask_args__isset() : result(false) {}
  bool result :1;
} _Master_CommitTask_args__isset;

class Master_CommitTask_args {
 public:

  Master_CommitTask_args(const Master_CommitTask_args&);
  Master_CommitTask_args& operator=(const Master_CommitTask_args&);
  Master_CommitTask_args() noexcept {
  }

  virtual ~Master_CommitTask_args() noexcept;
  TaskResult result;

  _Master_CommitTask_args__isset __isset;

  void __set_result(const TaskResult& val);

  bool operator == (const Master_CommitTask_args & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const Master_CommitTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Master_CommitTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Master_CommitTask_pargs {
 public:


  virtual ~Master_CommitTask_pargs() noexcept;
  const TaskResult* result;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Master_CommitTask_result {
 public:

  Master_CommitTask_result(const Master_CommitTask_result&) noexcept;
  Master_CommitTask_result& operator=(const Master_CommitTask_result&) noexcept;
  Master_CommitTask_result() noexcept {
  }

  virtual ~Master_CommitTask_result() noexcept;

  bool operator == (const Master_CommitTask_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Master_CommitTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Master_CommitTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Master_CommitTask_presult {
 public:


  virtual ~Master_CommitTask_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MasterClient : virtual public MasterIf {
 public:
  MasterClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MasterClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t AssignId() override;
  void send_AssignId();
  int32_t recv_AssignId();
  void AssignTask(TaskResponse& _return) override;
  void send_AssignTask();
  void recv_AssignTask(TaskResponse& _return);
  void CommitTask(const TaskResult& result) override;
  void send_CommitTask(const TaskResult& result);
  void recv_CommitTask();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MasterProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<MasterIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (MasterProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_AssignId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AssignTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CommitTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MasterProcessor(::std::shared_ptr<MasterIf> iface) :
    iface_(iface) {
    processMap_["AssignId"] = &MasterProcessor::process_AssignId;
    processMap_["AssignTask"] = &MasterProcessor::process_AssignTask;
    processMap_["CommitTask"] = &MasterProcessor::process_CommitTask;
  }

  virtual ~MasterProcessor() {}
};

class MasterProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MasterProcessorFactory(const ::std::shared_ptr< MasterIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< MasterIfFactory > handlerFactory_;
};

class MasterMultiface : virtual public MasterIf {
 public:
  MasterMultiface(std::vector<std::shared_ptr<MasterIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MasterMultiface() {}
 protected:
  std::vector<std::shared_ptr<MasterIf> > ifaces_;
  MasterMultiface() {}
  void add(::std::shared_ptr<MasterIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t AssignId() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AssignId();
    }
    return ifaces_[i]->AssignId();
  }

  void AssignTask(TaskResponse& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AssignTask(_return);
    }
    ifaces_[i]->AssignTask(_return);
    return;
  }

  void CommitTask(const TaskResult& result) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CommitTask(result);
    }
    ifaces_[i]->CommitTask(result);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MasterConcurrentClient : virtual public MasterIf {
 public:
  MasterConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  MasterConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t AssignId() override;
  int32_t send_AssignId();
  int32_t recv_AssignId(const int32_t seqid);
  void AssignTask(TaskResponse& _return) override;
  int32_t send_AssignTask();
  void recv_AssignTask(TaskResponse& _return, const int32_t seqid);
  void CommitTask(const TaskResult& result) override;
  int32_t send_CommitTask(const TaskResult& result);
  void recv_CommitTask(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
