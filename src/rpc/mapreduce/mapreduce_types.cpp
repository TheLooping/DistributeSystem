/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "mapreduce_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kResponseTypeValues[] = {
  ResponseType::WAIT,
  ResponseType::MAP_TASK,
  ResponseType::REDUCE_TASK,
  ResponseType::COMPLETED
};
const char* _kResponseTypeNames[] = {
  "WAIT",
  "MAP_TASK",
  "REDUCE_TASK",
  "COMPLETED"
};
const std::map<int, const char*> _ResponseType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kResponseTypeValues, _kResponseTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const ResponseType::type& val) {
  std::map<int, const char*>::const_iterator it = _ResponseType_VALUES_TO_NAMES.find(val);
  if (it != _ResponseType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ResponseType::type& val) {
  std::map<int, const char*>::const_iterator it = _ResponseType_VALUES_TO_NAMES.find(val);
  if (it != _ResponseType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


TaskResponse::~TaskResponse() noexcept {
}


void TaskResponse::__set_id(const int32_t val) {
  this->id = val;
}

void TaskResponse::__set_type(const ResponseType::type val) {
  this->type = val;
}

void TaskResponse::__set_params(const std::vector<std::string> & val) {
  this->params = val;
}

void TaskResponse::__set_resultNum(const int32_t val) {
  this->resultNum = val;
}
std::ostream& operator<<(std::ostream& out, const TaskResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TaskResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = static_cast<ResponseType::type>(ecast0);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->params.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->params.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readString(this->params[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.params = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->resultNum);
          this->__isset.resultNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TaskResponse");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(static_cast<int32_t>(this->type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("params", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->params.size()));
    std::vector<std::string> ::const_iterator _iter6;
    for (_iter6 = this->params.begin(); _iter6 != this->params.end(); ++_iter6)
    {
      xfer += oprot->writeString((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resultNum", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->resultNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TaskResponse &a, TaskResponse &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.params, b.params);
  swap(a.resultNum, b.resultNum);
  swap(a.__isset, b.__isset);
}

TaskResponse::TaskResponse(const TaskResponse& other7) {
  id = other7.id;
  type = other7.type;
  params = other7.params;
  resultNum = other7.resultNum;
  __isset = other7.__isset;
}
TaskResponse& TaskResponse::operator=(const TaskResponse& other8) {
  id = other8.id;
  type = other8.type;
  params = other8.params;
  resultNum = other8.resultNum;
  __isset = other8.__isset;
  return *this;
}
void TaskResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TaskResponse(";
  out << "id=" << to_string(id);
  out << ", " << "type=" << to_string(type);
  out << ", " << "params=" << to_string(params);
  out << ", " << "resultNum=" << to_string(resultNum);
  out << ")";
}


TaskResult::~TaskResult() noexcept {
}


void TaskResult::__set_id(const int32_t val) {
  this->id = val;
}

void TaskResult::__set_type(const ResponseType::type val) {
  this->type = val;
}

void TaskResult::__set_rs_loc(const std::vector<std::string> & val) {
  this->rs_loc = val;
}
std::ostream& operator<<(std::ostream& out, const TaskResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TaskResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->type = static_cast<ResponseType::type>(ecast9);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rs_loc.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->rs_loc.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readString(this->rs_loc[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.rs_loc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TaskResult");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(static_cast<int32_t>(this->type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rs_loc", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->rs_loc.size()));
    std::vector<std::string> ::const_iterator _iter15;
    for (_iter15 = this->rs_loc.begin(); _iter15 != this->rs_loc.end(); ++_iter15)
    {
      xfer += oprot->writeString((*_iter15));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TaskResult &a, TaskResult &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.rs_loc, b.rs_loc);
  swap(a.__isset, b.__isset);
}

TaskResult::TaskResult(const TaskResult& other16) {
  id = other16.id;
  type = other16.type;
  rs_loc = other16.rs_loc;
  __isset = other16.__isset;
}
TaskResult& TaskResult::operator=(const TaskResult& other17) {
  id = other17.id;
  type = other17.type;
  rs_loc = other17.rs_loc;
  __isset = other17.__isset;
  return *this;
}
void TaskResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TaskResult(";
  out << "id=" << to_string(id);
  out << ", " << "type=" << to_string(type);
  out << ", " << "rs_loc=" << to_string(rs_loc);
  out << ")";
}


